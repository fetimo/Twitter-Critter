# Default url mappings are:
# 
# * a controller called Main is mapped on the root of the site: /
# * a controller called Something is mapped on: /something
# 
# If you want to override this, add a line like this inside the class:
#
#  map '/otherurl'
#
# this will force the controller to be mounted on: /otherurl.

require 'twitter_oauth'
#require 'sentiment_analysis'
require File.join(File.dirname(__FILE__), 'critter_algorithm')

class MainController < Controller
	# the index action is called automatically when no other action is specified
		
	def index
		@title = 'Critter Signup'
	end
	
	def user
		@title = 'Saved!'
		
		if request.post?
			@user = ::User.new
			@user[:username] = request[:username]
			
			@user[:username].delete!('@') #removes @ in username		
			
			begin
				@data = Twitter.user_timeline(@user[:username]).first.text
			rescue
				#useful for if user 404s or Twitter offline
				redirect MainController.r(:critter, @user[:username])
			end
			
			@default_critter = {
				#default values
				:location => 0,
				:name => 'Steve',
				:arms => 'medium',
				:eye_colour => 'brown',
				:eye_shape => 'normal',
				:neck => 'medium',
				:legs => 'medium',
				:face => 'blank',
				:hands => 'simple',
				:hair_colour => 'brown',
				:hair_length => 'medium',
				:body_colour => 'black',
				:body_weight => 'medium',
				:body_tail => 'none',
				:accessory => 'none',
				:critter => ''
			}
			
			generate = Critter.new(@data, @user[:username], @default_critter)
			@critter = generate.critter
						
			redirect MainController.r(:critter, @user[:username])
			
			if @user.save
				flash[:message] = 'Successfully added!'
				#redirect MainController.r(:index)
			else
				flash[:message] = 'Something went wrong :('
			end
		end
	end
	
	def world
		@title = 'Welcome to the world'
	end
	
	def critter(username)
		@username = username
		@title = "Critter #{@username}"		
		@query = DB.fetch('SELECT critter FROM critters WHERE name = ? LIMIT 1', @username) do |row|
			@critter = row[:critter]
		end
	end
	
	@@client = TwitterOAuth::Client.new(
		:consumer_key => '3s7bWz9YWoXGyhg6lwVQsg',
		:consumer_secret => 'l8ZPe0N8ahMBKYZ8bhNNYnGjAybekHmlRDlYu466KM'
	)
	
	def evolve(username)
		oauth_confirm_url = 'http://critter.fetimo.com/auth'
		
		request_token = @@client.request_token(:oauth_callback => oauth_confirm_url)
		
		session[:token] = request_token.token
		session[:secret] = request_token.secret
		
		redirect request_token.authorize_url
	end
		
	def auth
		@title = 'Critter Authorisation'
		@retry_attempts = 0
		begin
			access_token = @@client.authorize(
				session[:token],
				session[:secret],
				:oauth_verifier => request.params[:oauth_verifier]
			)
			
			@p = access_token.params			
			
			if @@client.authorized?
				begin
					@auth_users = DB[:authorised_users]
					@auth_users.insert(@p[:oauth_token], @p[:oauth_token_secret], @p[:user_id], @p[:screen_name])
				rescue Sequel::DatabaseError
					@error = "database error (probably because you've already authorised Critter)"
				end
				redirect MainController.r(:critter, @p[:screen_name])
			end
			
			#if @@client.authorized? === true
			#	redirect MainController.r(:critter, @p[:screen_name])
			#end
			
		rescue OAuth::Unauthorized
			unless @retry_attempts >= 10
				@retry_attempts += 1
				sleep 1 #wait for twitter response
				retry
			else
				@error = 'unauthorised user'
			end
		end
	end

	# the string returned at the end of the function is used as the html body
	# if there is no template for the action. if there is a template, the string
	# is silently ignored
	def notemplate
		@title = 'Welcome to Ramaze!'
		return 'There is no \'notemplate.xhtml\' associated with this action.'
	end
end